#!/bin/sh
''''exec python -u -- "$0" ${1+"$@"} # '''
# vi: syntax=python

import signal
import sys
import os
from time import gmtime, strftime, localtime
from time import sleep
from subprocess import *

# -o file.txt : output information to a file rather than stderr
# -d          : debug mode
# -m          : monitor mode: output every measurement
# -p rate     : poll every rate seconds (default is 0.1)
# -h          : Show usage info

out         = sys.stderr
DEBUG       = False
poll_rate   = 0.1
monitor     = False
SIGNALS     = [signal.SIGINT, signal.SIGTERM, signal.SIGABRT]

def print_usage(cmd):
    print("USAGE: {} [-d] [-m] [-p TIME] [-o FILE] COMMAND [ARG [ARG [...]]]".format(cmd))
    print("")
    print(" -m      : Output every tick instead of at the end")
    print(" -p TIME : Set the time period in seconds")
    print(" -o FILE : Output to file (default is stdout)")
    print(" -d      : Debug mode (verbose output)")
    print("")


# Handle command-line input
child_args = []
i = 1
while i < len(sys.argv):
    if sys.argv[i] == '-o':
        i += 1
        out = open(sys.argv[i], 'w')
    elif sys.argv[i] == '-d':
        DEBUG = True
    elif sys.argv[i] == '-m':
        monitor = True
    elif sys.argv[i] == '-p':
        i += 1
        poll_rate = float(sys.argv[i])
    elif sys.argv[i] == '-h':
        print_usage(sys.argv[0])
        sys.exit(0)
    else:
        child_args.append(sys.argv[i])
    i += 1

# child_command should be a single argument as if to "/bin/sh -c 'child_command'"
# when shell=True is enabled
child_command = ' '.join(child_args)

def log(msg):
    if DEBUG:
        print >>sys.stderr, "memusg: {}".format(msg)

def put(msg):
    out.write(msg)
    out.flush # Only works if run with python -u

def get_vsize(sid):
    vsize = 0
    # Example: /bin/ps -o vsize= --sid 23928
    proc = Popen(['ps', '-o', 'vsize=', '--sid', str(sid)], stdout=PIPE, stderr=None, shell=False)
    (stdout, _stderr) = proc.communicate()
    # Iterate over each process within the process tree of our process session
    # (this ensures that we include processes launched by a child bash script, etc.)
    for line in stdout.split():
        vsize += int(line.strip())
    return vsize

def get_rssize(sid):
    rssize = 0
    # Example: /bin/ps -o rssize= --sid 23928
    proc = Popen(['ps', '-o', 'rssize=', '--sid', str(sid)], stdout=PIPE, stderr=None, shell=False)
    (stdout, _stderr) = proc.communicate()
    # Iterate over each process within the process tree of our process session
    # (this ensures that we include processes launched by a child bash script, etc.)
    for line in stdout.split():
        rssize += int(line.strip())
    return rssize    

def get_cur_time():    
    return strftime("%Y-%m-%d %H:%M:%S", localtime())

def handle_signal(signal, frame):
    # If the proc is running, pass the signal down.
    if proc and not proc.returncode:
        proc.send_signal(signal)
    if fork_pid != 0:
        os.kill(fork_pid, signal)
    else:
        sys.exit(0)


# Create a new process session for this process so that we can
# easily calculate the memory usage of the whole process tree using ps
#
# Since we need a new session using os.setsid(), we must first fork()
pid     = os.getpid()
sid     = os.getsid(pid)
pgid    = os.getpgid(pid)
log("Pre-fork: PID is {} ; PGID is {} ; SID is {}".format(pid, pgid, sid))

fork_pid    = os.fork()
proc        = None
# Attach signal handler to everything we want to pass through
for s in SIGNALS:
    signal.signal(s, handle_signal)

if fork_pid == 0:
    # We *are* the new fork (not the original process)
    pid     = os.getpid()
    sid     = os.getsid(pid)
    pgid    = os.getpgid(pid)
    log("Post-fork: PID is {} ; PGID is {} ; SID is {}".format(pid, pgid, sid))

    log("Trying to init our own session".format(pid, pgid))
    os.setsid()
    sid     = os.getsid(pid)
    pgid    = os.getpgid(pid)
    log("Post-session init: PID is {} ; PGID is {} ; SID is {}".format(pid, pgid, sid))
        
    log("Starting child: {}".format(child_command))
    # "None" means "inherit from parent"
    proc = Popen(child_command, stdin=None, stdout=None, stderr=None, env=None, shell=True)

    #vmpeak = -1
    rspeak = -1
    while proc.returncode == None:
        #size = get_vsize(sid)
        size = get_rssize(sid)
        if monitor:
            put("memusg: {} kb\n".format(size))
        #vmpeak = max(size, vmpeak)
        if size > rspeak:
            cur_time = get_cur_time()
            put(f"[{cur_time}] rspeak={size}\n")
        rspeak = max(size, rspeak)
        #log("Waiting for child to exit. vmpeak={}".format(vmpeak))
        log("Waiting for child to exit. rspeak={}".format(rspeak))
        proc.poll()
        sleep(poll_rate) # Time in seconds (float)
    
    #put("memusg: vmpeak: {} kb\n".format(vmpeak))
    cur_time = get_cur_time()
    ###echo "["$(date +"%Y-%m-%d %H:%M:%S")"]" "memusg Maximum resident set size (kbytes): $peak" >> $log_file
    put(f"[{cur_time}] memusg Maximum resident set size (kbytes): {rspeak}\n")
    #put("memusg: rspeak: {} kb\n".format(rspeak))

    status = proc.returncode
    log("Child process returned {}".format(status))
    sys.exit(status)

else:
    # This is the branch of fork that continues the original process
    (_fork_pid, full_status) = os.waitpid(fork_pid, 0)
    status = full_status >> 8
    log("Fork returned {}".format(status))
    out.close()
    sys.exit(status)
